{
    "id": "B93C4522-5BEA-4118-97AE-2B560628A157",
    "name": "Docker",
    "friendlyName": "Docker",
    "description": "Build a Docker image, push an image to a registry, run an image in a container or run any docker command.",
	"helpMarkDown": "[More Information](http://aka.ms/vsts-docker-task)",
    "category": "Build",
	"visibility": [
        "Build",
        "Release"
    ],
    "author": "Microsoft Corporation",
    "version": {
        "Major": 0,
        "Minor": 1,
        "Patch": 3
    },
    "demands": [],
    "groups": [
        {
            "name": "advanced",
            "displayName": "Advanced Options",
            "isExpanded": false
        }
    ],
    "inputs": [
        {
            "name": "dockerHostEndpoint",
            "type": "connectedService:dockerhost",
            "label": "Docker Host Connection",
            "required": true,
            "helpMarkDown": "Select the connection to the Docker container host."
        },
        {
            "name": "dockerRegistryEndpoint",
            "type": "connectedService:dockerregistry",
            "label": "Docker Registry Connection",
            "required": true,
            "helpMarkDown": "Select the connection to the Docker Registry."
        },
        {
            "name": "action",
            "type": "pickList",
            "label": "Action",
            "defaultValue": "Run an image",
            "required": true,
            "options":
            {
                "Build an image": "Build an image",
                "Push an image": "Push an image",
                "Run an image": "Run an image",
                "Run a Docker command": "Run a Docker command"
            },
            "helpMarkDown": "Select a Docker action."
        },
        {
            "name": "dockerFile",
            "type": "filePath",
            "label": "Docker File",
            "defaultValue": "**/Dockerfile",
            "required": true,
            "visibleRule": "action = Build an image",
            "helpMarkDown": "Path to Dockerfile to use with the Docker Build action. Wild cards can be used. For example **/Dockerfile. \nNote: The path must be to a file within the Docker build context."
        },
        {
            "name": "imageName",
            "type": "string",
            "label": "Image Name",
            "required": true,
            "visibleRule": "action = Build an image || action = Push an image || action = Run an image",
            "helpMarkDown": "Name of the image to use during build, run or push actions. Image name should be in lowercase only. \nUsually in the format 'your-username/image-name:tag' sans quotes for example, fabrikam/webapp:latest or fabrikam/webapp:$(Build.BuildId). When working with the Docker registry you need to specify 'username'."
        },
        {
            "name": "context",
            "type": "filePath",
            "label": "Context",
            "defaultValue": "$(Build.StagingDirectory)",
            "required": true,
            "visibleRule": "action = Build an image",
            "helpMarkDown": "The path to the folder to build from. Docker builds images from a Dockerfile and a 'context'."
        },
        {
            "name": "containerName",
            "type": "string",
            "label": "Container Name",
            "required": false,
            "visibleRule": "action = Run an image",
            "helpMarkDown": "Container name to use to run an image."
        },
        {
            "name": "ports",
            "type": "multiLine",
            "properties": {
                "resizable": "true",
                "rows": "2"
            },
            "label": "Ports",
            "required": false,
            "visibleRule": "action = Run an image",
            "helpMarkDown": "Port mappings to pass to the run commnad in hostmachine-port:container-port format. \nFor example, -p 80:8080 binds port 8080 of the container to port 80 of the host machine. \nSpecify each port mapping in a new line."
        },
        {
            "name": "envVars",
            "type": "multiLine",
            "properties": {
                "resizable": "true",
                "rows": "2"
            },
            "label": "Environment Variables",
            "required": false,
            "visibleRule": "action = Run an image",
            "helpMarkDown": "Name value pairs to set as environment variables in the container. Specify each name=value pair in a new line."
        },
        {
            "name": "removeImageAfterPush",
            "type": "boolean",
            "label": "Remove image after push",
            "defaultValue": "false",
            "visibleRule": "action = Push an image && action = always hide for now because of async publish",
            "helpMarkDown": "When set the image is force removed after publishing."
        },
        {
            "name": "customCommand",
            "type": "string",
            "label": "Command",
            "required": true,
            "visibleRule": "action = Run a Docker command",
            "helpMarkDown": "Docker command with arguments to execute. For example, 'rmi -f image-name' sans quotes to force remove an image."
        },
        {
            "name": "containerCommand",
            "type": "string",
            "label": "Command for container",
            "required": false,
            "visibleRule": "action = Run an image",
            "helpMarkDown": "Specify a command and its arguments, if any, for the container to run.\nFor example, if the image contains a simple Python Flask web application you can specify 'python app.py' to launch the web application."
        },
        {
            "name": "cwd",
            "type": "filePath",
            "label": "Working Directory",
            "defaultValue": "$(System.DefaultWorkingDirectory)",
            "required": false,
            "helpMarkDown": "Current working directory where the certificates will be created.",
            "groupName": "advanced"
        }
    ],
    "instanceNameFormat": "$(action)",
    "execution": {
        "Node": {
            "target": "invokeDockerAction.js",
            "argumentFormat": ""
        }
    }
}